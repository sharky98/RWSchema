<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns="https://github.com/sharky98/RWSchema/Defs" elementFormDefault="qualified" targetNamespace="https://github.com/sharky98/RWSchema/Defs" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="CommonElements.xsd" />
  <xs:complexType name="ThoughtDef">
    <xs:choice minOccurs="1" maxOccurs="unbounded">
      <xs:element name="thoughtClass" type="xs:string" />
      <xs:element name="workerClass" type="xs:string" />
      <xs:element name="stages">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="ThoughtStage" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="stackLimit" type="xs:int" />
      <xs:element name="stackedEffectMultiplier" type="xs:float" />
      <xs:element name="stagesStack" type="xs:boolean" />
      <xs:element name="durationDays" type="xs:float" />
      <xs:element name="invert" type="xs:boolean" />
      <xs:element name="validWhileDespawned" type="xs:boolean" />
      <xs:element name="nextThought" type="xs:string" />
      <xs:element name="producesMemoryThought" type="xs:string" />
      <xs:element name="nullifyingTraits">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="neverNullifyIfAnyTrait">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="nullifyingTraitDegrees">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="TraitRequirement" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="nullifyingOwnTales">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="nullifyingPrecepts">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="nullifyingHediffs">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="nullifyingGenes">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="requiredTraits">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="requiredGenes">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="requiredTraitsDegree" type="xs:int" />
      <xs:element name="requiredHediffs">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="effectMultiplyingStat" type="xs:string" />
      <xs:element name="hediff" type="xs:string" />
      <xs:element name="mentalState" type="xs:string" />
      <xs:element name="gameCondition" type="xs:string" />
      <xs:element name="nullifiedIfNotColonist" type="xs:boolean" />
      <xs:element name="thoughtToMake" type="xs:string" />
      <xs:element name="showBubble" type="xs:boolean" />
      <xs:element name="minExpectation" type="xs:string" />
      <xs:element name="minExpectationForNegativeThought" type="xs:string" />
      <xs:element name="replaceThoughts">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="xs:string" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="developmentalStageFilter" type="DevelopmentalStage" />
      <xs:element name="chemicalDef" type="xs:string" />
      <xs:element name="lerpMoodToZero" type="xs:boolean" />
      <xs:element name="stackLimitForSameOtherPawn" type="xs:int" />
      <xs:element name="lerpOpinionToZeroAfterDurationPct" type="xs:float" />
      <xs:element name="socialTargetDevelopmentalStageFilter" type="DevelopmentalStage" />
      <xs:element name="ignoreSubhumans" type="xs:boolean" />
      <xs:element name="doNotApplyToQuestLodgers" type="xs:boolean" />
      <xs:element name="maxCumulatedOpinionOffset" type="xs:float" />
      <xs:element name="taleDef" type="xs:string" />
      <xs:element name="gender" type="Gender" />
      <xs:element name="labelInBracketsExtraForHediff" type="xs:string" />
      <xs:element name="defName" type="xs:string" />
      <xs:element name="label" type="xs:string" />
      <xs:element name="description" type="xs:string" />
      <xs:element name="descriptionHyperlinks">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="DefHyperlink" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="ignoreConfigErrors" type="xs:boolean" />
      <xs:element name="ignoreIllegalLabelCharacterConfigError" type="xs:boolean" />
      <xs:element name="modExtensions">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="DefModExtension" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
    </xs:choice>
    <xs:attribute name="Name" type="xs:string" />
    <xs:attribute name="ParentName" type="xs:string" />
    <xs:attribute name="Class" type="xs:string" />
    <xs:attribute name="MayRequire" type="xs:string" />
    <xs:attribute name="MayRequireAnyOf" type="xs:string" />
  </xs:complexType>
</xs:schema>