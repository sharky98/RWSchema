<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns="https://github.com/sharky98/RWSchema/Defs" elementFormDefault="qualified" targetNamespace="https://github.com/sharky98/RWSchema/Defs" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="CommonElements.xsd" />
  <xs:complexType name="RitualPatternDef">
    <xs:choice minOccurs="1" maxOccurs="unbounded">
      <xs:element name="nameMaker" type="xs:string" />
      <xs:element name="ritualFreeStartIntervalDaysRange">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:pattern value="\s*-?\d+(\.\d+)?\s*(~\s*-?\d+(\.\d+)?\s*)?" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="ritualObligationTriggers">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="RitualObligationTriggerProperties" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="ritualObligationTargetFilter" type="xs:string" />
      <xs:element name="ritualTargetFilter" type="xs:string" />
      <xs:element name="ritualBehavior" type="xs:string" />
      <xs:element name="ritualOutcomeEffect" type="xs:string" />
      <xs:element name="ritualOnlyForIdeoMembers" type="StrBoolean" />
      <xs:element name="canStartAnytime" type="StrBoolean" />
      <xs:element name="alwaysStartAnytime" type="StrBoolean" />
      <xs:element name="allowOtherInstances" type="StrBoolean" />
      <xs:element name="playsIdeoMusic" type="StrBoolean" />
      <xs:element name="ignoreConsumableBuildingRequirement" type="StrBoolean" />
      <xs:element name="mergeGizmosForObligations" type="StrBoolean" />
      <xs:element name="canMergeGizmosFromDifferentIdeos" type="StrBoolean" />
      <xs:element name="ignoreExtremeTemperatures" type="StrBoolean" />
      <xs:element name="minTechLevel" type="TechLevel" />
      <xs:element name="maxTechLevel" type="TechLevel" />
      <xs:element name="showIdeoIconsInDialog" type="StrBoolean" />
      <xs:element name="ritualExpectedDesc" type="xs:string" />
      <xs:element name="ritualExpectedDescNoAdjective" type="xs:string" />
      <xs:element name="shortDescOverride" type="xs:string" />
      <xs:element name="descOverride" type="xs:string" />
      <xs:element name="ritualExplanation" type="xs:string" />
      <xs:element name="beginRitualOverride" type="xs:string" />
      <xs:element name="iconPathOverride" type="xs:string" />
      <xs:element name="cancelIconPathOverride" type="xs:string" />
      <xs:element name="tags">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li">
              <xs:complexType>
                <xs:simpleContent>
                  <xs:extension base="xs:string">
                    <xs:attribute name="MayRequire" type="xs:string" />
                    <xs:attribute name="MayRequireAnyOf" type="xs:string" />
                  </xs:extension>
                </xs:simpleContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="patternGroupTag" type="xs:string" />
      <xs:element name="layerWhitelist">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li">
              <xs:complexType>
                <xs:simpleContent>
                  <xs:extension base="xs:string">
                    <xs:attribute name="MayRequire" type="xs:string" />
                    <xs:attribute name="MayRequireAnyOf" type="xs:string" />
                  </xs:extension>
                </xs:simpleContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="layerBlacklist">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li">
              <xs:complexType>
                <xs:simpleContent>
                  <xs:extension base="xs:string">
                    <xs:attribute name="MayRequire" type="xs:string" />
                    <xs:attribute name="MayRequireAnyOf" type="xs:string" />
                  </xs:extension>
                </xs:simpleContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="defName" type="xs:string" />
      <xs:element name="label" type="xs:string" />
      <xs:element name="description" type="xs:string" />
      <xs:element name="descriptionHyperlinks">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="DefHyperlink" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:element name="ignoreConfigErrors" type="StrBoolean" />
      <xs:element name="ignoreIllegalLabelCharacterConfigError" type="StrBoolean" />
      <xs:element name="modExtensions">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="li" type="DefModExtension" />
          </xs:sequence>
          <xs:attribute name="MayRequire" type="xs:string" />
          <xs:attribute name="MayRequireAnyOf" type="xs:string" />
        </xs:complexType>
      </xs:element>
    </xs:choice>
    <xs:attribute name="Name" type="xs:string" />
    <xs:attribute name="ParentName" type="xs:string" />
    <xs:attribute name="Abstract" type="StrBoolean" />
    <xs:attribute name="Class" type="xs:string" />
    <xs:attribute name="MayRequire" type="xs:string" />
    <xs:attribute name="MayRequireAnyOf" type="xs:string" />
  </xs:complexType>
</xs:schema>